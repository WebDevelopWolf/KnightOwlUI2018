

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "KoApi\Web.config"
//     Connection String Name: "KoDataContext"
//     Connection String:      "Data Source=WEBDEVWOLF-LAPT\SQLEXPRESS;Initial Catalog=KoData;Persist Security Info=True;User ID=kodata;password=**zapped**;"
// ------------------------------------------------------------------------------------------------
// Database Edition       : Express Edition (64-bit)
// Database Engine Edition: Express

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace KoApi.Models
{
    using System.Linq;

    #region Unit of work

    public interface IKoContext : System.IDisposable
    {
        System.Data.Entity.DbSet<Animal> Animals { get; set; } // Animal
        System.Data.Entity.DbSet<Dashboard> Dashboards { get; set; } // Dashboard
        System.Data.Entity.DbSet<Event> Events { get; set; } // Event
        System.Data.Entity.DbSet<KeeperLog> KeeperLogs { get; set; } // KeeperLog
        System.Data.Entity.DbSet<Module> Modules { get; set; } // Module
        System.Data.Entity.DbSet<SubModule> SubModules { get; set; } // SubModule
        System.Data.Entity.DbSet<SubModuleHeading> SubModuleHeadings { get; set; } // SubModuleHeading
        System.Data.Entity.DbSet<TodaysKeeperLog> TodaysKeeperLogs { get; set; } // TodaysKeeperLog
        System.Data.Entity.DbSet<ToDo> ToDoes { get; set; } // ToDo
        System.Data.Entity.DbSet<User> Users { get; set; } // User
        System.Data.Entity.DbSet<UserModule> UserModules { get; set; } // UserModule
        System.Data.Entity.DbSet<UserSubModule> UserSubModules { get; set; } // UserSubModule
        System.Data.Entity.DbSet<UserWidget> UserWidgets { get; set; } // UserWidget
        System.Data.Entity.DbSet<Widget> Widgets { get; set; } // Widget

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
        System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get; }
        System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get; }
        System.Data.Entity.Database Database { get; }
        System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity);
        System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors();
        System.Data.Entity.DbSet Set(System.Type entityType);
        System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();
    }

    #endregion

    #region Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class KoContext : System.Data.Entity.DbContext, IKoContext
    {
        public System.Data.Entity.DbSet<Animal> Animals { get; set; } // Animal
        public System.Data.Entity.DbSet<Dashboard> Dashboards { get; set; } // Dashboard
        public System.Data.Entity.DbSet<Event> Events { get; set; } // Event
        public System.Data.Entity.DbSet<KeeperLog> KeeperLogs { get; set; } // KeeperLog
        public System.Data.Entity.DbSet<Module> Modules { get; set; } // Module
        public System.Data.Entity.DbSet<SubModule> SubModules { get; set; } // SubModule
        public System.Data.Entity.DbSet<SubModuleHeading> SubModuleHeadings { get; set; } // SubModuleHeading
        public System.Data.Entity.DbSet<TodaysKeeperLog> TodaysKeeperLogs { get; set; } // TodaysKeeperLog
        public System.Data.Entity.DbSet<ToDo> ToDoes { get; set; } // ToDo
        public System.Data.Entity.DbSet<User> Users { get; set; } // User
        public System.Data.Entity.DbSet<UserModule> UserModules { get; set; } // UserModule
        public System.Data.Entity.DbSet<UserSubModule> UserSubModules { get; set; } // UserSubModule
        public System.Data.Entity.DbSet<UserWidget> UserWidgets { get; set; } // UserWidget
        public System.Data.Entity.DbSet<Widget> Widgets { get; set; } // Widget

        static KoContext()
        {
            System.Data.Entity.Database.SetInitializer<KoContext>(null);
        }

        public KoContext()
            : base("Name=KoDataContext")
        {
        }

        public KoContext(string connectionString)
            : base(connectionString)
        {
        }

        public KoContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public KoContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public KoContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new AnimalConfiguration());
            modelBuilder.Configurations.Add(new DashboardConfiguration());
            modelBuilder.Configurations.Add(new EventConfiguration());
            modelBuilder.Configurations.Add(new KeeperLogConfiguration());
            modelBuilder.Configurations.Add(new ModuleConfiguration());
            modelBuilder.Configurations.Add(new SubModuleConfiguration());
            modelBuilder.Configurations.Add(new SubModuleHeadingConfiguration());
            modelBuilder.Configurations.Add(new TodaysKeeperLogConfiguration());
            modelBuilder.Configurations.Add(new ToDoConfiguration());
            modelBuilder.Configurations.Add(new UserConfiguration());
            modelBuilder.Configurations.Add(new UserModuleConfiguration());
            modelBuilder.Configurations.Add(new UserSubModuleConfiguration());
            modelBuilder.Configurations.Add(new UserWidgetConfiguration());
            modelBuilder.Configurations.Add(new WidgetConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new AnimalConfiguration(schema));
            modelBuilder.Configurations.Add(new DashboardConfiguration(schema));
            modelBuilder.Configurations.Add(new EventConfiguration(schema));
            modelBuilder.Configurations.Add(new KeeperLogConfiguration(schema));
            modelBuilder.Configurations.Add(new ModuleConfiguration(schema));
            modelBuilder.Configurations.Add(new SubModuleConfiguration(schema));
            modelBuilder.Configurations.Add(new SubModuleHeadingConfiguration(schema));
            modelBuilder.Configurations.Add(new TodaysKeeperLogConfiguration(schema));
            modelBuilder.Configurations.Add(new ToDoConfiguration(schema));
            modelBuilder.Configurations.Add(new UserConfiguration(schema));
            modelBuilder.Configurations.Add(new UserModuleConfiguration(schema));
            modelBuilder.Configurations.Add(new UserSubModuleConfiguration(schema));
            modelBuilder.Configurations.Add(new UserWidgetConfiguration(schema));
            modelBuilder.Configurations.Add(new WidgetConfiguration(schema));
            return modelBuilder;
        }
    }
    #endregion

    #region Database context factory

    public class KoContextFactory : System.Data.Entity.Infrastructure.IDbContextFactory<KoContext>
    {
        public KoContext Create()
        {
            return new KoContext();
        }
    }

    #endregion

    #region Fake Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class FakeKoContext : IKoContext
    {
        public System.Data.Entity.DbSet<Animal> Animals { get; set; }
        public System.Data.Entity.DbSet<Dashboard> Dashboards { get; set; }
        public System.Data.Entity.DbSet<Event> Events { get; set; }
        public System.Data.Entity.DbSet<KeeperLog> KeeperLogs { get; set; }
        public System.Data.Entity.DbSet<Module> Modules { get; set; }
        public System.Data.Entity.DbSet<SubModule> SubModules { get; set; }
        public System.Data.Entity.DbSet<SubModuleHeading> SubModuleHeadings { get; set; }
        public System.Data.Entity.DbSet<TodaysKeeperLog> TodaysKeeperLogs { get; set; }
        public System.Data.Entity.DbSet<ToDo> ToDoes { get; set; }
        public System.Data.Entity.DbSet<User> Users { get; set; }
        public System.Data.Entity.DbSet<UserModule> UserModules { get; set; }
        public System.Data.Entity.DbSet<UserSubModule> UserSubModules { get; set; }
        public System.Data.Entity.DbSet<UserWidget> UserWidgets { get; set; }
        public System.Data.Entity.DbSet<Widget> Widgets { get; set; }

        public FakeKoContext()
        {
            Animals = new FakeDbSet<Animal>("AnimalId");
            Dashboards = new FakeDbSet<Dashboard>("DashId");
            Events = new FakeDbSet<Event>("EventId");
            KeeperLogs = new FakeDbSet<KeeperLog>("KeeperLogId");
            Modules = new FakeDbSet<Module>("ModuleId");
            SubModules = new FakeDbSet<SubModule>("SubModuleId");
            SubModuleHeadings = new FakeDbSet<SubModuleHeading>("ModuleTitle", "Description", "Instruction", "RouterLink");
            TodaysKeeperLogs = new FakeDbSet<TodaysKeeperLog>("KeeperLogId", "Message", "User");
            ToDoes = new FakeDbSet<ToDo>("ToDoId");
            Users = new FakeDbSet<User>("UserId");
            UserModules = new FakeDbSet<UserModule>("UserModuleId");
            UserSubModules = new FakeDbSet<UserSubModule>("UserSubModuleId");
            UserWidgets = new FakeDbSet<UserWidget>("UserWidgetId");
            Widgets = new FakeDbSet<Widget>("WidgetId");
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private System.Data.Entity.Infrastructure.DbChangeTracker _changeTracker;
        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get { return _changeTracker; } }
        private System.Data.Entity.Infrastructure.DbContextConfiguration _configuration;
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get { return _configuration; } }
        private System.Data.Entity.Database _database;
        public System.Data.Entity.Database Database { get { return _database; } }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }

    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity> where TEntity : class
    {
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new System.ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new System.ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override System.Collections.Generic.IEnumerable<TEntity> RemoveRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
            return items;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return System.Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return System.Activator.CreateInstance<TDerivedEntity>();
        }

        public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        System.Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        System.Linq.Expressions.Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression)
        {
            return new FakeDbAsyncEnumerable<TElement>(expression);
        }

        public object Execute(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute(expression));
        }

        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression)
            : base(expression)
        { }

        public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T>
    {
        private readonly System.Collections.Generic.IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }

    #endregion

    #region POCO classes

    // Animal
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class Animal
    {
        public System.Guid AnimalId { get; set; } // AnimalId (Primary key)
        public string Name { get; set; } // Name (length: 30)
    }

    // Dashboard
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class Dashboard
    {
        public System.Guid DashId { get; set; } // DashId (Primary key)
        public string DashName { get; set; } // DashName (length: 100)
        public int DashViewOrder { get; set; } // DashViewOrder
        public bool DashEnabled { get; set; } // DashEnabled
        public System.Guid UserId { get; set; } // UserId
        public bool? ShowWelcome { get; set; } // ShowWelcome
        public bool? ShowWidgets { get; set; } // ShowWidgets
    }

    // Event
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class Event
    {
        public System.Guid EventId { get; set; } // EventId (Primary key)
        public string EventTitle { get; set; } // EventTitle (length: 50)
        public int Category { get; set; } // Category
        public System.DateTime EventDate { get; set; } // EventDate
    }

    // KeeperLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class KeeperLog
    {
        public System.Guid KeeperLogId { get; set; } // KeeperLogId (Primary key)
        public System.Guid AnimalId { get; set; } // AnimalId
        public System.DateTime LogDate { get; set; } // LogDate
        public string Message { get; set; } // Message (length: 250)
        public System.Guid? UserId { get; set; } // UserId
    }

    // Module
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class Module
    {
        public System.Guid ModuleId { get; set; } // ModuleId (Primary key)
        public string ModuleTitle { get; set; } // ModuleTitle (length: 50)
        public string RouterLink { get; set; } // RouterLink (length: 100)
        public string FaIcon { get; set; } // FaIcon (length: 50)
        public short Enabled { get; set; } // Enabled
        public string Description { get; set; } // Description (length: 250)
        public string Instruction { get; set; } // Instruction (length: 250)
        public int? ViewOrder { get; set; } // ViewOrder
    }

    // SubModule
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class SubModule
    {
        public System.Guid SubModuleId { get; set; } // SubModuleId (Primary key)
        public System.Guid ModuleId { get; set; } // ModuleId
        public string SubModuleTitle { get; set; } // SubModuleTitle (length: 50)
        public string RouterLink { get; set; } // RouterLink (length: 100)
        public bool Enabled { get; set; } // Enabled
    }

    // SubModuleHeading
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class SubModuleHeading
    {
        public string ModuleTitle { get; set; } // ModuleTitle (Primary key) (length: 50)
        public string Description { get; set; } // Description (Primary key) (length: 250)
        public string Instruction { get; set; } // Instruction (Primary key) (length: 250)
        public string RouterLink { get; set; } // RouterLink (Primary key) (length: 100)
    }

    // TodaysKeeperLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class TodaysKeeperLog
    {
        public System.Guid KeeperLogId { get; set; } // KeeperLogId (Primary key)
        public string Animal { get; set; } // Animal (length: 30)
        public string LogTime { get; set; } // LogTime (length: 5)
        public string Message { get; set; } // Message (Primary key) (length: 250)
        public string User { get; set; } // User (Primary key) (length: 50)
    }

    // ToDo
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class ToDo
    {
        public System.Guid ToDoId { get; set; } // ToDoId (Primary key)
        public string ToDoTitle { get; set; } // ToDoTitle (length: 50)
        public System.DateTime ToDoDate { get; set; } // ToDoDate
        public int Priority { get; set; } // Priority
        public System.Guid UserId { get; set; } // UserId
        public bool Complete { get; set; } // Complete
    }

    // User
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class User
    {
        public System.Guid UserId { get; set; } // UserId (Primary key)
        public string Username { get; set; } // Username (length: 50)
        public string JobTitle { get; set; } // JobTitle (length: 150)
        public string Avatar { get; set; } // Avatar (length: 50)
    }

    // UserModule
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class UserModule
    {
        public System.Guid UserModuleId { get; set; } // UserModuleId (Primary key)
        public System.Guid ModuleId { get; set; } // ModuleId
        public System.Guid UserId { get; set; } // UserId
        public System.DateTime DateAdded { get; set; } // DateAdded
    }

    // UserSubModule
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class UserSubModule
    {
        public System.Guid UserSubModuleId { get; set; } // UserSubModuleId (Primary key)
        public System.Guid SubModuleId { get; set; } // SubModuleId
        public System.Guid UserId { get; set; } // UserId
        public System.DateTime DateAdded { get; set; } // DateAdded
    }

    // UserWidget
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class UserWidget
    {
        public System.Guid UserWidgetId { get; set; } // UserWidgetId (Primary key)
        public System.Guid WidgetId { get; set; } // WidgetId
        public System.Guid UserId { get; set; } // UserId
        public System.DateTime DateAdded { get; set; } // DateAdded
    }

    // Widget
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class Widget
    {
        public System.Guid WidgetId { get; set; } // WidgetId (Primary key)
        public string WidgetName { get; set; } // WidgetName (length: 50)
        public string WidgetTitle { get; set; } // WidgetTitle (length: 50)
        public bool Enabled { get; set; } // Enabled
    }

    #endregion

    #region POCO Configuration

    // Animal
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class AnimalConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Animal>
    {
        public AnimalConfiguration()
            : this("dbo")
        {
        }

        public AnimalConfiguration(string schema)
        {
            ToTable("Animal", schema);
            HasKey(x => x.AnimalId);

            Property(x => x.AnimalId).HasColumnName(@"AnimalId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Name).HasColumnName(@"Name").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(30);
        }
    }

    // Dashboard
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class DashboardConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Dashboard>
    {
        public DashboardConfiguration()
            : this("dbo")
        {
        }

        public DashboardConfiguration(string schema)
        {
            ToTable("Dashboard", schema);
            HasKey(x => x.DashId);

            Property(x => x.DashId).HasColumnName(@"DashId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.DashName).HasColumnName(@"DashName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(100);
            Property(x => x.DashViewOrder).HasColumnName(@"DashViewOrder").HasColumnType("int").IsRequired();
            Property(x => x.DashEnabled).HasColumnName(@"DashEnabled").HasColumnType("bit").IsRequired();
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.ShowWelcome).HasColumnName(@"ShowWelcome").HasColumnType("bit").IsOptional();
            Property(x => x.ShowWidgets).HasColumnName(@"ShowWidgets").HasColumnType("bit").IsOptional();
        }
    }

    // Event
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class EventConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Event>
    {
        public EventConfiguration()
            : this("dbo")
        {
        }

        public EventConfiguration(string schema)
        {
            ToTable("Event", schema);
            HasKey(x => x.EventId);

            Property(x => x.EventId).HasColumnName(@"EventId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.EventTitle).HasColumnName(@"EventTitle").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Category).HasColumnName(@"Category").HasColumnType("int").IsRequired();
            Property(x => x.EventDate).HasColumnName(@"EventDate").HasColumnType("datetime").IsRequired();
        }
    }

    // KeeperLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class KeeperLogConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<KeeperLog>
    {
        public KeeperLogConfiguration()
            : this("dbo")
        {
        }

        public KeeperLogConfiguration(string schema)
        {
            ToTable("KeeperLog", schema);
            HasKey(x => x.KeeperLogId);

            Property(x => x.KeeperLogId).HasColumnName(@"KeeperLogId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.AnimalId).HasColumnName(@"AnimalId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.LogDate).HasColumnName(@"LogDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Message).HasColumnName(@"Message").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(250);
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsOptional();
        }
    }

    // Module
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class ModuleConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Module>
    {
        public ModuleConfiguration()
            : this("dbo")
        {
        }

        public ModuleConfiguration(string schema)
        {
            ToTable("Module", schema);
            HasKey(x => x.ModuleId);

            Property(x => x.ModuleId).HasColumnName(@"ModuleId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ModuleTitle).HasColumnName(@"ModuleTitle").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.RouterLink).HasColumnName(@"RouterLink").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(100);
            Property(x => x.FaIcon).HasColumnName(@"FaIcon").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Enabled).HasColumnName(@"Enabled").HasColumnType("smallint").IsRequired();
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(250);
            Property(x => x.Instruction).HasColumnName(@"Instruction").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(250);
            Property(x => x.ViewOrder).HasColumnName(@"ViewOrder").HasColumnType("int").IsOptional();
        }
    }

    // SubModule
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class SubModuleConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SubModule>
    {
        public SubModuleConfiguration()
            : this("dbo")
        {
        }

        public SubModuleConfiguration(string schema)
        {
            ToTable("SubModule", schema);
            HasKey(x => x.SubModuleId);

            Property(x => x.SubModuleId).HasColumnName(@"SubModuleId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ModuleId).HasColumnName(@"ModuleId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.SubModuleTitle).HasColumnName(@"SubModuleTitle").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.RouterLink).HasColumnName(@"RouterLink").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(100);
            Property(x => x.Enabled).HasColumnName(@"Enabled").HasColumnType("bit").IsRequired();
        }
    }

    // SubModuleHeading
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class SubModuleHeadingConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<SubModuleHeading>
    {
        public SubModuleHeadingConfiguration()
            : this("dbo")
        {
        }

        public SubModuleHeadingConfiguration(string schema)
        {
            ToTable("SubModuleHeading", schema);
            HasKey(x => new { x.ModuleTitle, x.Description, x.Instruction, x.RouterLink });

            Property(x => x.ModuleTitle).HasColumnName(@"ModuleTitle").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Description).HasColumnName(@"Description").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(250).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Instruction).HasColumnName(@"Instruction").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(250).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.RouterLink).HasColumnName(@"RouterLink").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(100).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // TodaysKeeperLog
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class TodaysKeeperLogConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<TodaysKeeperLog>
    {
        public TodaysKeeperLogConfiguration()
            : this("dbo")
        {
        }

        public TodaysKeeperLogConfiguration(string schema)
        {
            ToTable("TodaysKeeperLog", schema);
            HasKey(x => new { x.KeeperLogId, x.Message, x.User });

            Property(x => x.KeeperLogId).HasColumnName(@"KeeperLogId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Animal).HasColumnName(@"Animal").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(30);
            Property(x => x.LogTime).HasColumnName(@"LogTime").HasColumnType("varchar").IsOptional().IsUnicode(false).HasMaxLength(5);
            Property(x => x.Message).HasColumnName(@"Message").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(250).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.User).HasColumnName(@"User").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50).HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // ToDo
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class ToDoConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ToDo>
    {
        public ToDoConfiguration()
            : this("dbo")
        {
        }

        public ToDoConfiguration(string schema)
        {
            ToTable("ToDo", schema);
            HasKey(x => x.ToDoId);

            Property(x => x.ToDoId).HasColumnName(@"ToDoId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ToDoTitle).HasColumnName(@"ToDoTitle").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.ToDoDate).HasColumnName(@"ToDoDate").HasColumnType("datetime").IsRequired();
            Property(x => x.Priority).HasColumnName(@"Priority").HasColumnType("int").IsRequired();
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.Complete).HasColumnName(@"Complete").HasColumnType("bit").IsRequired();
        }
    }

    // User
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class UserConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<User>
    {
        public UserConfiguration()
            : this("dbo")
        {
        }

        public UserConfiguration(string schema)
        {
            ToTable("User", schema);
            HasKey(x => x.UserId);

            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Username).HasColumnName(@"Username").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.JobTitle).HasColumnName(@"JobTitle").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(150);
            Property(x => x.Avatar).HasColumnName(@"Avatar").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
        }
    }

    // UserModule
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class UserModuleConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<UserModule>
    {
        public UserModuleConfiguration()
            : this("dbo")
        {
        }

        public UserModuleConfiguration(string schema)
        {
            ToTable("UserModule", schema);
            HasKey(x => x.UserModuleId);

            Property(x => x.UserModuleId).HasColumnName(@"UserModuleId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ModuleId).HasColumnName(@"ModuleId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.DateAdded).HasColumnName(@"DateAdded").HasColumnType("datetime").IsRequired();
        }
    }

    // UserSubModule
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class UserSubModuleConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<UserSubModule>
    {
        public UserSubModuleConfiguration()
            : this("dbo")
        {
        }

        public UserSubModuleConfiguration(string schema)
        {
            ToTable("UserSubModule", schema);
            HasKey(x => x.UserSubModuleId);

            Property(x => x.UserSubModuleId).HasColumnName(@"UserSubModuleId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.SubModuleId).HasColumnName(@"SubModuleId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.DateAdded).HasColumnName(@"DateAdded").HasColumnType("datetime").IsRequired();
        }
    }

    // UserWidget
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class UserWidgetConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<UserWidget>
    {
        public UserWidgetConfiguration()
            : this("dbo")
        {
        }

        public UserWidgetConfiguration(string schema)
        {
            ToTable("UserWidget", schema);
            HasKey(x => x.UserWidgetId);

            Property(x => x.UserWidgetId).HasColumnName(@"UserWidgetId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.WidgetId).HasColumnName(@"WidgetId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.UserId).HasColumnName(@"UserId").HasColumnType("uniqueidentifier").IsRequired();
            Property(x => x.DateAdded).HasColumnName(@"DateAdded").HasColumnType("datetime").IsRequired();
        }
    }

    // Widget
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.35.0.0")]
    public class WidgetConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Widget>
    {
        public WidgetConfiguration()
            : this("dbo")
        {
        }

        public WidgetConfiguration(string schema)
        {
            ToTable("Widget", schema);
            HasKey(x => x.WidgetId);

            Property(x => x.WidgetId).HasColumnName(@"WidgetId").HasColumnType("uniqueidentifier").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.WidgetName).HasColumnName(@"WidgetName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.WidgetTitle).HasColumnName(@"WidgetTitle").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(50);
            Property(x => x.Enabled).HasColumnName(@"Enabled").HasColumnType("bit").IsRequired();
        }
    }

    #endregion

}
// </auto-generated>

